= Титульник =

= Задачи =

1. Изучить принцип работы генеративных конкурирующих сетей (GANs)
2. Создать простейшую сеть на основе MNIST

= Введение =

С развитием компьютерных технологий всё большую и большую популярность захватывает
машинное обучение. Одним из главных его приложения является решение задачи 
классификации: на вход алгоритму поступают некоторые данные, а на выходе алгоритм
определяет принадлежность этих данных к какой-либо группе. Примерами таких 
алгоритмов могут быть кластерный анализ, метод опорных векторов или
логистическая регрессия.

Однако, при усложнении структуры входных данных, использование перечисленных
методов затрудняется. К примеру, при классификации изображений распределение
входных данных для изображений одного и того же класса может сильно различаться.
В таком случае требуется более чувствительный метод.

Эту задачу хорошо решает глубокое обучение. В нём используются нейронные сети,
за основу которых взяты нейронные связи в человеческом мозгу. Глубокое обучение
так называется, поскольку там принимают участие множество скрытых слоёв. Для 
хорошего качества выходных данных необходимо большое количество входных данных,
однако натренированная модель способна классифицировать изображения, которые, 
как может показаться, может классифицировать только человек, например, отличать
фотографии кошек от фотографий собак.

Но что, если перевернуть этот процесс, и в качестве входных данных давать модели
класс данных, а на выходе получать эти данные? Такая модель была предложена
Яном Гудфелоу (????) в 2014 году. Она изобрёл генеративные конкурирующие сети
(Generative Adversarial Networks, GANs). Принцип их работы и будет рассматриваться
далее.

= Основная часть =

== Принцип работы ==

В основе работы генеративных конкурирующих сетей лежит две нейронные сети:
генератор и TODO. Данные сети называются "конкурирующими", поскольку генератор 
и TODO пытаются превзойти друг друга. Генератору на вход поступает случайный
вектор, из которого он пытается создать новые данные, неотличимые от реальных.
Он стремится "переиграть" TODO, то есть сделать данные неотличимыми.
TODO принимает данные, сгенерированные генератором, и реальные данные; его цель -
отличить их. Другими словами, TODO стремится к тому, чтобы минимизировать свою
функцию потерь, тогда как генератор стремится её максимизировать

== Математическое обоснование ==

== Пример построения ==

= Заключение =

= Литература =

= Приложение =
